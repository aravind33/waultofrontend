{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"Y:\\\\Kashy Files\\\\Projex\\\\saran\\\\Almost-Everything-master\\\\frontend\\\\pages\\\\auth\\\\password\\\\reset\\\\[id].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport Layout from '../../../../components/Layout';\nimport { withRouter } from 'next/router';\nimport { resetPassword } from '../../../../actions/auth';\n\nvar ResetPassword = function ResetPassword(_ref) {\n  var router = _ref.router;\n\n  var _useState = useState({\n    name: '',\n    newPassword: '',\n    error: '',\n    message: '',\n    showForm: true\n  }),\n      values = _useState[0],\n      setValues = _useState[1];\n\n  var showForm = values.showForm,\n      name = values.name,\n      newPassword = values.newPassword,\n      error = values.error,\n      message = values.message;\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    resetPassword({\n      newPassword: newPassword,\n      resetPasswordLink: router.query.id\n    }).then(function (data) {\n      if (data.error) {\n        setValues(_objectSpread({}, values, {\n          error: data.error,\n          showForm: false,\n          newPassword: ''\n        }));\n      } else {\n        setValues(_objectSpread({}, values, {\n          message: data.message,\n          showForm: false,\n          newPassword: '',\n          error: false\n        }));\n      }\n    });\n  };\n\n  var passwordResetForm = function passwordResetForm() {\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"form-group pt-5\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, __jsx(\"input\", {\n      type: \"password\",\n      onChange: function onChange(e) {\n        return setValues(_objectSpread({}, values, {\n          newPassword: e.target.value\n        }));\n      },\n      className: \"form-control\",\n      value: newPassword,\n      placeholder: \"Type new password\",\n      required: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    })), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      className: \"btn btn-primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }, \"Change password\")));\n  };\n\n  var showError = function showError() {\n    return error ? __jsx(\"div\", {\n      className: \"alert alert-danger\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 38\n      }\n    }, error) : '';\n  };\n\n  var showMessage = function showMessage() {\n    return message ? __jsx(\"div\", {\n      className: \"alert alert-success\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 42\n      }\n    }, message) : '';\n  };\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"Reset password\"), __jsx(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }), showError(), showMessage(), passwordResetForm()));\n};\n\nexport default withRouter(ResetPassword);","map":{"version":3,"sources":["Y:/Kashy Files/Projex/saran/Almost-Everything-master/frontend/pages/auth/password/reset/[id].js"],"names":["useState","Layout","withRouter","resetPassword","ResetPassword","router","name","newPassword","error","message","showForm","values","setValues","handleSubmit","e","preventDefault","resetPasswordLink","query","id","then","data","passwordResetForm","target","value","showError","showMessage"],"mappings":";;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,aAAT,QAA8B,0BAA9B;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAgB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AAAA,kBACNL,QAAQ,CAAC;AACjCM,IAAAA,IAAI,EAAE,EAD2B;AAEjCC,IAAAA,WAAW,EAAE,EAFoB;AAGjCC,IAAAA,KAAK,EAAE,EAH0B;AAIjCC,IAAAA,OAAO,EAAE,EAJwB;AAKjCC,IAAAA,QAAQ,EAAE;AALuB,GAAD,CADF;AAAA,MAC3BC,MAD2B;AAAA,MACnBC,SADmB;;AAAA,MAS1BF,QAT0B,GASsBC,MATtB,CAS1BD,QAT0B;AAAA,MAShBJ,IATgB,GASsBK,MATtB,CAShBL,IATgB;AAAA,MASVC,WATU,GASsBI,MATtB,CASVJ,WATU;AAAA,MASGC,KATH,GASsBG,MATtB,CASGH,KATH;AAAA,MASUC,OATV,GASsBE,MATtB,CASUF,OATV;;AAWlC,MAAMI,YAAY,GAAG,SAAfA,YAAe,CAAAC,CAAC,EAAI;AACtBA,IAAAA,CAAC,CAACC,cAAF;AACAZ,IAAAA,aAAa,CAAC;AACVI,MAAAA,WAAW,EAAXA,WADU;AAEVS,MAAAA,iBAAiB,EAAEX,MAAM,CAACY,KAAP,CAAaC;AAFtB,KAAD,CAAb,CAGGC,IAHH,CAGQ,UAAAC,IAAI,EAAI;AACZ,UAAIA,IAAI,CAACZ,KAAT,EAAgB;AACZI,QAAAA,SAAS,mBAAMD,MAAN;AAAcH,UAAAA,KAAK,EAAEY,IAAI,CAACZ,KAA1B;AAAiCE,UAAAA,QAAQ,EAAE,KAA3C;AAAkDH,UAAAA,WAAW,EAAE;AAA/D,WAAT;AACH,OAFD,MAEO;AACHK,QAAAA,SAAS,mBAAMD,MAAN;AAAcF,UAAAA,OAAO,EAAEW,IAAI,CAACX,OAA5B;AAAqCC,UAAAA,QAAQ,EAAE,KAA/C;AAAsDH,UAAAA,WAAW,EAAE,EAAnE;AAAuEC,UAAAA,KAAK,EAAE;AAA9E,WAAT;AACH;AACJ,KATD;AAUH,GAZD;;AAcA,MAAMa,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,WACtB;AAAM,MAAA,QAAQ,EAAER,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,IAAI,EAAC,UADT;AAEI,MAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,eAAIF,SAAS,mBAAMD,MAAN;AAAcJ,UAAAA,WAAW,EAAEO,CAAC,CAACQ,MAAF,CAASC;AAApC,WAAb;AAAA,OAFf;AAGI,MAAA,SAAS,EAAC,cAHd;AAII,MAAA,KAAK,EAAEhB,WAJX;AAKI,MAAA,WAAW,EAAC,mBALhB;AAMI,MAAA,QAAQ,MANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,CAXJ,CADsB;AAAA,GAA1B;;AAkBA,MAAMiB,SAAS,GAAG,SAAZA,SAAY;AAAA,WAAOhB,KAAK,GAAG;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCA,KAArC,CAAH,GAAuD,EAAnE;AAAA,GAAlB;;AACA,MAAMiB,WAAW,GAAG,SAAdA,WAAc;AAAA,WAAOhB,OAAO,GAAG;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCA,OAAtC,CAAH,GAA0D,EAAxE;AAAA,GAApB;;AAEA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGKe,SAAS,EAHd,EAIKC,WAAW,EAJhB,EAKKJ,iBAAiB,EALtB,CADJ,CADJ;AAWH,CAzDD;;AA2DA,eAAenB,UAAU,CAACE,aAAD,CAAzB","sourcesContent":["import { useState } from 'react';\r\nimport Layout from '../../../../components/Layout';\r\nimport { withRouter } from 'next/router';\r\nimport { resetPassword } from '../../../../actions/auth';\r\n\r\nconst ResetPassword = ({ router }) => {\r\n    const [values, setValues] = useState({\r\n        name: '',\r\n        newPassword: '',\r\n        error: '',\r\n        message: '',\r\n        showForm: true\r\n    });\r\n\r\n    const { showForm, name, newPassword, error, message } = values;\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        resetPassword({\r\n            newPassword,\r\n            resetPasswordLink: router.query.id\r\n        }).then(data => {\r\n            if (data.error) {\r\n                setValues({ ...values, error: data.error, showForm: false, newPassword: '' });\r\n            } else {\r\n                setValues({ ...values, message: data.message, showForm: false, newPassword: '', error: false });\r\n            }\r\n        });\r\n    };\r\n\r\n    const passwordResetForm = () => (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group pt-5\">\r\n                <input\r\n                    type=\"password\"\r\n                    onChange={e => setValues({ ...values, newPassword: e.target.value })}\r\n                    className=\"form-control\"\r\n                    value={newPassword}\r\n                    placeholder=\"Type new password\"\r\n                    required\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className=\"btn btn-primary\">Change password</button>\r\n            </div>\r\n        </form>\r\n    );\r\n\r\n    const showError = () => (error ? <div className=\"alert alert-danger\">{error}</div> : '');\r\n    const showMessage = () => (message ? <div className=\"alert alert-success\">{message}</div> : '');\r\n\r\n    return (\r\n        <Layout>\r\n            <div className=\"container\">\r\n                <h2>Reset password</h2>\r\n                <hr />\r\n                {showError()}\r\n                {showMessage()}\r\n                {passwordResetForm()}\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default withRouter(ResetPassword);"]},"metadata":{},"sourceType":"module"}